"""
Test cases for the `add_integer` function.
"""

Import and Test:

::    
    
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::

    >>> add_integer(100, -2)
    98

::

    >>> add_integer(2)
    100


Testing with float inputs:

::
    
    >>> add_integer(100.3, -2)
    98

::
    
    >>> add_integer(1.1, 1.9)
    2

Testing default parameter:

::

    >>> add_integer(5)
    103

::

    >>> add_integer(-5)
    93


Edge cases with large numbers:

::

    >>> add_integer(999999999999, 1)
    1000000000000

::

    >>> add_integer(-999999999999, 1)
    -999999999998


Testing error cases:

::

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("Holberton", 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4, None)
    Traceback (most recent call last):
    TypeError: b must be an integer


Testing with floats that are cast to integers:

::

    >>> add_integer(5.9, 4.2)
    9

::

    >>> add_integer(3.0, 3.0)
    6

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer